
#cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
#overlay
#br_netfilter
#EOF
#
#sudo modprobe overlay
#sudo modprobe br_netfilter
#
## Setup required sysctl params, these persist across reboots.
#cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
#net.bridge.bridge-nf-call-iptables  = 1
#net.ipv4.ip_forward                 = 1
#net.bridge.bridge-nf-call-ip6tables = 1
#EOF
#
## Apply sysctl params without reboot
#
#sudo sysctl --system
#sudo apt-get update -y
#sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common docker.io
#sudo usermod -a -G docker vagrant
#sudo sed -i '/swap/d' /etc/fstab
#sudo echo "swap removed from fstab"
#sudo swapoff -a 
##wget -qO - https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
#sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
#echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
##sudo add-apt-repository https://apt.kubernetes.io/ <??> deb  kubernetes-xenial main kubernetes.list
#sudo apt-get update
#sudo apt-get install -y kubelet kubeadm kubectl sshpass
#sudo apt-mark hold kubelet kubeadm kubectl
#sudo echo "KUBELET_EXTRA_ARGS=--node-ip=$NODEIP" >> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
##sudo echo "KUBELET_EXTRA_ARGS=--node-ip=$NODEIP" >> /etc/default/kubelet
##CG=$(sudo docker info 2>/dev/null | sed -n 's/Cgroup Driver: \(.*\)/\1/p')
##sed -i "s/cgroup-driver=systemd/cgroup-driver=$CG/g" /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
##sudo echo "cgroup-driver=cgroupfs" >> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
##sudo systemctl daemon-reload
##sudo systemctl restart kubelet
##sudo kubeadm init --apiserver-advertise-address="$NODEIP" --apiserver-cert-extra-sans="192.168.1.170"  --node-name k8s-master --pod-network-cidr=172.16.0.0/16 --cgroup-driver=cgroupfs
##sudo mkdir -p /home/vagrant/.kube
##sudo cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
##sudo chown vagrant:vagrant /home/vagrant/.kube/config
##sudo kubectl apply -f https://docs.projectcalico.org/v3.8/manifests/calico.yaml
##sudo kubeadm token create --print-join-command >> /tmp/join-command.sh
##    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./files/join-command"





# script2 
# https://computingforgeeks.com/deploy-kubernetes-cluster-on-ubuntu-with-kubeadm/
#
#


# https://stackoverflow.com/questions/49721708/how-to-install-specific-version-of-kubernetes
#


# curl -s https://packages.cloud.google.com/apt/dists/kubernetes-xenial/main/binary-amd64/Packages | grep Version | awk '{print $2}'

# https://medium.com/@myte/kubernetes-nfs-and-dynamic-nfs-provisioning-97e2afb8b4a9

# To-Do: use nfs share for docker registry certs 
#
#  https://www.linuxtechi.com/setup-private-docker-registry-kubernetes/
#



#sudo echo 'Acquire::http { Proxy "http://192.168.1.147:3142"; };' >> /etc/apt/apt.conf.d/01proxy

#sudo echo 'Acquire::HTTPS::Proxy "https://192.168.1.147:3142";' >> /etc/apt/apt.conf.d/01proxy
#sudo echo 'Acquire::https { Proxy "http://192.168.1.147:3142"; };' >> /etc/apt/apt.conf.d/01proxy
#export http_proxy=http://192.168.1.147:3142
#sudo rm -f /etc/apt/trusted.gpg


# apt-transport-https